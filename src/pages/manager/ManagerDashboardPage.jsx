import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Typography,
  Paper,
  Card,
  CardContent,
  Alert,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  useTheme,
  useMediaQuery
} from '@mui/material';
import {
  Assignment,
  Person,
  AccessTime,
  TrendingUp,
  CheckCircle,
  Warning,
  Error as ErrorIcon
} from '@mui/icons-material';
import { useAuth } from '../../contexts/AuthContext';
import statisticsService from '../../api/statisticsService';
import ticketService from '../../api/ticketService';

const ManagerDashboardPage = () => {
  const { user } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dashboardData, setDashboardData] = useState(null);
  const [activeTickets, setActiveTickets] = useState([]);

  useEffect(() => {
    fetchManagerData();
  }, []);

  const fetchManagerData = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const dashboard = await statisticsService.getDashboardStats();
      setDashboardData(dashboard);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const tickets = await ticketService.getTickets({
        status: ['new', 'in_progress', 'pending'],
        limit: 10
      });
      setActiveTickets(tickets.tickets || []);

    } catch (err) {
      console.error('Error fetching manager data:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
    } finally {
      setLoading(false);
    }
  };

  const StatCard = ({ title, value, subtitle, icon: Icon, color = 'primary' }) => (
    <Card sx={{ height: '100%', position: 'relative', overflow: 'visible' }}>
      <CardContent sx={{ p: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Box>
            <Typography color="textSecondary" variant="body2" gutterBottom>
              {title}
            </Typography>
            <Typography variant="h5" component="h2" color={color}>
              {value}
            </Typography>
            {subtitle && (
              <Typography variant="body2" color="textSecondary">
                {subtitle}
              </Typography>
            )}
          </Box>
          <Box 
            sx={{ 
              backgroundColor: theme.palette[color].light,
              borderRadius: '50%',
              p: 1,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
            <Icon sx={{ color: theme.palette[color].main, fontSize: 24 }} />
          </Box>
        </Box>
      </CardContent>
    </Card>
  );

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'new': return 'primary';
      case 'in_progress': return 'warning';
      case 'pending': return 'info';
      case 'resolved': return 'success';
      case 'closed': return 'default';
      default: return 'default';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <Box sx={{ p: 3, display: 'flex', justifyContent: 'center' }}>
        <Typography>–ñ“Ø–∫—Ç–µ–ª—É–¥–µ... / –ó–∞–≥—Ä—É–∑–∫–∞...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mt: 2 }}>
        {error}
      </Alert>
    );
  }

  return (
    <Box sx={{ p: { xs: 2, md: 3 }, maxWidth: 1400, mx: 'auto' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥—ã / Manager Dashboard
        </Typography>
        <Typography variant="body1" color="textSecondary">
          –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, {user?.first_name}! / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.first_name}!
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–ë–∞—Ä–ª—ã“õ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫"
            value={dashboardData?.tickets?.total || 0}
            icon={Assignment}
            color="primary"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"
            value={dashboardData?.tickets?.new_tickets || 0}
            icon={ErrorIcon}
            color="error"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="”®“£–¥–µ–ª—É–¥–µ / –í —Ä–∞–±–æ—Ç–µ"
            value={dashboardData?.tickets?.in_progress || 0}
            icon={AccessTime}
            color="warning"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–®–µ—à—ñ–ª–≥–µ–Ω / –†–µ—à–µ–Ω–æ"
            value={dashboardData?.tickets?.resolved || 0}
            icon={CheckCircle}
            color="success"
          />
        </Grid>
      </Grid>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–®“±“ì—ã–ª ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –°—Ä–æ—á–Ω—ã–µ"
            value={dashboardData?.tickets?.urgent || 0}
            subtitle="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞"
            icon={Warning}
            color="error"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–ë–µ–ª—Å–µ–Ω–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä / –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
            value={dashboardData?.users?.active_users || 0}
            icon={Person}
            color="info"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <StatCard
            title="–°–æ“£“ì—ã 24 —Å–∞“ì–∞—Ç / –ó–∞ 24 —á–∞—Å–∞"
            value={dashboardData?.tickets?.last_24h || 0}
            subtitle="–Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"
            icon={TrendingUp}
            color="primary"
          />
        </Grid>
      </Grid>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ */}
      <Paper sx={{ p: 3 }}>
        <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Assignment />
          –ë–µ–ª—Å–µ–Ω–¥—ñ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä / –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        </Typography>
        
        {activeTickets.length === 0 ? (
          <Alert severity="info">
            –ë–µ–ª—Å–µ–Ω–¥—ñ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä –∂–æ“õ / –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
          </Alert>
        ) : (
          <TableContainer>
            <Table size={isMobile ? 'small' : 'medium'}>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>–¢–∞“õ—ã—Ä—ã–ø / –¢–µ–º–∞</TableCell>
                  <TableCell>–ö“Ø–π / –°—Ç–∞—Ç—É—Å</TableCell>
                  <TableCell>–ë–∞—Å—ã–º–¥—ã–ª—ã“õ / –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</TableCell>
                  <TableCell>“ö“±—Ä—ã–ª“ì–∞–Ω / –°–æ–∑–¥–∞–Ω–æ</TableCell>
                  <TableCell>”ò—Ä–µ–∫–µ—Ç—Ç–µ—Ä / –î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {activeTickets.map((ticket) => (
                  <TableRow key={ticket.id}>
                    <TableCell>#{ticket.id}</TableCell>
                    <TableCell sx={{ maxWidth: 200 }}>
                      <Typography variant="body2" noWrap>
                        {ticket.subject}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={ticket.status} 
                        color={getStatusColor(ticket.status)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={ticket.priority} 
                        color={getPriorityColor(ticket.priority)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {formatDate(ticket.created_at)}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Button 
                        size="small" 
                        variant="outlined"
                        onClick={() => window.open(`/tickets/${ticket.id}`, '_blank')}
                      >
                        –ö”©—Ä—É / –ü—Ä–æ—Å–º–æ—Ç—Ä
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Paper>
    </Box>
  );
};

export default ManagerDashboardPage;