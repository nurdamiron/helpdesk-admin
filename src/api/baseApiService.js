import api from './index';
import axios from 'axios';
// Remove the circular dependency
// We'll get authService instance from params

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è API-—Å–µ—Ä–≤–∏—Å–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
 */
export class BaseApiService {
  // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  static errorHandler = null;
  
  // –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  static localServerAvailable = null;
  static lastLocalServerCheck = 0;
  static LOCAL_SERVER_CHECK_INTERVAL = 5000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ API
   * @param {Object} handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
   */
  static setErrorHandler(handler) {
    BaseApiService.errorHandler = handler;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
   */
  static async checkLocalServer() {
    const now = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
    if (BaseApiService.localServerAvailable !== null && 
        now - BaseApiService.lastLocalServerCheck < BaseApiService.LOCAL_SERVER_CHECK_INTERVAL) {
      return BaseApiService.localServerAvailable;
    }
    
    try {
      console.log('üîç Checking local server at http://localhost:5002/health');
      const response = await axios.get('http://localhost:5002/health', { 
        timeout: 1000,
        validateStatus: () => true 
      });
      BaseApiService.localServerAvailable = response.status === 200;
      BaseApiService.lastLocalServerCheck = now;
      
      if (BaseApiService.localServerAvailable) {
        console.log('üü¢ Local server is available');
      } else {
        console.log(`üî¥ Local server returned status: ${response.status}`);
      }
      
      return BaseApiService.localServerAvailable;
    } catch (error) {
      console.log('üî¥ Local server is not available:', error.message);
      BaseApiService.localServerAvailable = false;
      BaseApiService.lastLocalServerCheck = now;
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  static isDevelopmentMode() {
    const hostname = window.location.hostname;
    const port = window.location.port;
    return (hostname === 'localhost' || hostname === '127.0.0.1') && port === '5173';
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
   * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @param {string} options.method - HTTP –º–µ—Ç–æ–¥ (get, post, put, delete)
   * @param {string} options.url - URL –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} options.data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param {string|null} options.requiredRole - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
   * @param {number} options.retries - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
   * @param {Object} options.errorOptions - –û–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
   * @param {Object} options.authService - –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
   * @returns {Promise} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
   */
  async request({ method, url, data = null, requiredRole = null, retries = 1, errorOptions = {}, authService = null }) {
    console.log(`üîÑ Making API request: ${method.toUpperCase()} ${url}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ä–æ–ª—å
    if (requiredRole && authService) {
      const user = authService.getCurrentUser();
      if (!user || !authService.checkPermission(user, requiredRole)) {
        const error = new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (BaseApiService.errorHandler) {
          return BaseApiService.errorHandler.handleApiError(error, errorOptions);
        }
        
        throw error;
      }
    }

    const isDev = BaseApiService.isDevelopmentMode();
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–≤—ã–º
    if (isDev) {
      const localAvailable = await BaseApiService.checkLocalServer();
      
      if (localAvailable) {
        try {
          const localInstance = axios.create({
            baseURL: 'http://localhost:5002/api',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''
            }
          });
          
          let response;
          
          switch (method.toLowerCase()) {
            case 'get':
              response = await localInstance.get(url);
              break;
            case 'post':
              response = await localInstance.post(url, data);
              break;
            case 'put':
              response = await localInstance.put(url, data);
              break;
            case 'delete':
              response = await localInstance.delete(url);
              break;
            default:
              throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: ${method}`);
          }
          
          console.log(`‚úÖ Local server response for ${url}`);
          return response.data;
        } catch (localError) {
          console.log(`‚ö†Ô∏è Local server error for ${url}:`, localError.message);
          console.log('Response status:', localError.response?.status);
          console.log('Response data:', localError.response?.data);
          
          // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ù–ï –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ production –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
          // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏)
          if (localError.response) {
            // –≠—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (4xx, 5xx), –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            console.log('üí° Server error detected, staying on local server in dev mode');
            throw localError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –µ—Å—Ç—å
          }
          
          console.log('üîÑ Network error detected, trying production server as fallback...');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å production —Å–µ—Ä–≤–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        }
      } else {
        console.log('üîÑ Local server unavailable in dev mode, using production fallback...');
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º production —Å–µ—Ä–≤–µ—Ä (–∏–ª–∏ –≤ production —Ä–µ–∂–∏–º–µ, –∏–ª–∏ –∫–∞–∫ fallback –≤ dev)
    try {
      let response;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
      switch (method.toLowerCase()) {
        case 'get':
          response = await api.get(url);
          break;
        case 'post':
          response = await api.post(url, data);
          break;
        case 'put':
          response = await api.put(url, data);
          break;
        case 'delete':
          response = await api.delete(url);
          break;
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: ${method}`);
      }
      
      return response.data;
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.error(`‚ùå API Error for ${url}:`, {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
        config: {
          method: method,
          url: url,
          baseURL: error.config?.baseURL
        }
      });
      
      // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ axios interceptor
      // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
      if (retries > 0 && !error.response) {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏, –∞ –Ω–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries})`);
        return this.request({ 
          method, 
          url, 
          data, 
          requiredRole, 
          retries: retries - 1,
          errorOptions,
          authService
        });
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      if (BaseApiService.errorHandler) {
        return Promise.reject(BaseApiService.errorHandler.handleApiError(error, errorOptions));
      }
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      const errorMessage = error.response?.data?.error || error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      throw new Error(errorMessage);
    }
  }
}

export default new BaseApiService(); 