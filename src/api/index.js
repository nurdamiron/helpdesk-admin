// src/api/index.js
import axios from 'axios';
import { API_URL } from '../config/api';

console.log(`Using API URL (${process.env.NODE_ENV} mode):`, API_URL);

// –û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
export const USE_MOCK_DATA = false;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    'User-Agent': navigator.userAgent || 'HelpDesk Mobile Client',
    'X-Requested-With': 'XMLHttpRequest'
  },
  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
  withCredentials: false,
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use(
  (config) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    const token = localStorage.getItem('token');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', {
      method: config.method.toUpperCase(),
      url: config.url,
      data: config.data,
      params: config.params,
      headers: config.headers
    });
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
      url: response.config.url,
      status: response.status,
      data: response.data
    });
    return response;
  },
  (error) => {
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const errorInfo = {
      url: error.config?.url,
      method: error.config?.method,
      status: error.response?.status,
      data: error.response?.data,
      message: error.message,
      code: error.code,
      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
      network: navigator.onLine ? 'online' : 'offline',
      userAgent: navigator.userAgent
    };
    
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', errorInfo);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (error.code === 'NETWORK_ERROR' || error.message === 'Network Error') {
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      if (isMobile) {
        console.error('üî• –ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', {
          baseURL: error.config?.baseURL,
          timeout: error.config?.timeout,
          headers: error.config?.headers
        });
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const mobileError = new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
        mobileError.isMobileNetworkError = true;
        mobileError.originalError = error;
        return Promise.reject(mobileError);
      }
    }
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) –∏–ª–∏ –∏—Å—Ç–µ–∫ —Ç–æ–∫–µ–Ω (403), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if (error.response && (error.response.status === 401 || error.response.status === 403)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–∏ –ª–æ–≥–∏–Ω–∞ –º—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è
      if (window.location.pathname !== '/login') {
        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
        const currentPath = window.location.pathname;
        if (currentPath !== '/login') {
          sessionStorage.setItem('redirectAfterLogin', currentPath);
        }
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location = '/login?session_expired=true';
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;