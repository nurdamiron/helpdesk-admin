import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Grid,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  Typography,
  CircularProgress,
  Alert,
  AlertTitle,
  Divider,
  Paper
} from '@mui/material';
import { Send as SendIcon, Login as LoginIcon, Email as EmailIcon } from '@mui/icons-material';
import { ticketService } from '../../api/ticketService';
import { useAuth } from '../../contexts/AuthContext';
import SuccessNotification from '../common/SuccessNotification';
import WhatsAppIcon from '../common/WhatsAppIcon';

const TicketForm = ({ onSubmitSuccess }) => {
  const { t } = useTranslation(['common', 'pages', 'tickets']);
  const navigate = useNavigate();
  const { isAuthenticated, user, isStaff } = useAuth();
  
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    subject: '',
    category: '',
    type: 'support_request', // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    message: '',
    priority: 'medium',
    communicationChannel: 'email', // –ö–∞–Ω–∞–ª —Å–≤—è–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  });
  
  // –¢–∏–ø—ã –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const ticketTypes = [
    { id: 'support_request', name: t('tickets:type.support_request', '–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏') },
    { id: 'incident', name: t('tickets:type.incident', '–ò–Ω—Ü–∏–¥–µ–Ω—Ç') },
    { id: 'complaint', name: t('tickets:type.complaint', '–ñ–∞–ª–æ–±–∞') },
    { id: 'suggestion', name: t('tickets:type.suggestion', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é') },
    { id: 'access_request', name: t('tickets:type.access_request', '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞') },
    { id: 'information_request', name: t('tickets:type.information_request', '–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏') },
    { id: 'emergency', name: t('tickets:type.emergency', '–°—Ä–æ—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞') },
    { id: 'other', name: t('tickets:type.other', '–î—Ä—É–≥–æ–µ') }
  ];
  
  const [formErrors, setFormErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [categories, setCategories] = useState([]);
  const [showSuccessNotification, setShowSuccessNotification] = useState(false);
  const [successType, setSuccessType] = useState('email');
  const [createdTicketId, setCreatedTicketId] = useState(null);
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (isAuthenticated && user) {
      setFormData(prev => ({
        ...prev,
        name: user.first_name && user.last_name 
          ? `${user.first_name} ${user.last_name}` 
          : user.first_name || user.last_name || prev.name,
        email: user.email || prev.email
      }));
    }
  }, [isAuthenticated, user]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await ticketService.getCategories();
        setCategories(data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
        // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        setCategories([
          { id: 'technical', name: t('tickets:category.technical', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞') },
          { id: 'billing', name: t('tickets:category.billing', '–ë–∏–ª–ª–∏–Ω–≥ –∏ —Ä–∞—Å—á–µ—Ç—ã') },
          { id: 'general', name: t('tickets:category.general', '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã') },
          { id: 'it_support', name: t('tickets:category.it_support', 'IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞') },
          { id: 'equipment_issue', name: t('tickets:category.equipment_issue', '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º') },
          { id: 'software_issue', name: t('tickets:category.software_issue', '–ü—Ä–æ–±–ª–µ–º—ã —Å –ü–û') },
          { id: 'access_request', name: t('tickets:category.access_request', '–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞') },
          { id: 'complaint', name: t('tickets:category.complaint', '–ñ–∞–ª–æ–±–∞') },
          { id: 'suggestion', name: t('tickets:category.suggestion', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') },
          { id: 'hr_question', name: t('tickets:category.hr_question', '–í–æ–ø—Ä–æ—Å –ø–æ HR') },
          { id: 'safety_issue', name: t('tickets:category.safety_issue', '–í–æ–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏') },
          { id: 'training_request', name: t('tickets:category.training_request', '–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ') },
          { id: 'policy_question', name: t('tickets:category.policy_question', '–í–æ–ø—Ä–æ—Å –ø–æ –ø–æ–ª–∏—Ç–∏–∫–∞–º') },
          { id: 'other', name: t('tickets:category.other', '–î—Ä—É–≥–æ–µ') }
        ]);
      }
    };
    
    fetchCategories();
  }, [t]);
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
  const handleLogin = () => {
    navigate('/login', { state: { from: '/', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.' } });
  };
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (formErrors[name]) {
      setFormErrors({
        ...formErrors,
        [name]: ''
      });
    }
  };
  
  const validateForm = () => {
    const errors = {};
    const requiredMessage = t('form.required', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!formData.name.trim()) errors.name = requiredMessage;
    if (!formData.email.trim()) errors.email = requiredMessage;
    if (!formData.subject.trim()) errors.subject = requiredMessage;
    if (!formData.message.trim()) errors.message = requiredMessage;
    if (!formData.category) errors.category = requiredMessage;
    if (!formData.type) errors.type = requiredMessage;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (formData.email.trim() && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = t('form.invalidEmail', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (formData.phone.trim() && !/^[+]?[(]?[0-9]{1,4}[)]?[-\s.]?[0-9]{1,4}[-\s.]?[0-9]{1,9}$/.test(formData.phone)) {
      errors.phone = t('form.invalidPhone', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0; // —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (isStaff && !isAuthenticated) {
      setError(t('form.authRequired', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫.'));
      return;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É
    setError(null);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    
    try {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω WhatsApp, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º
      if (formData.communicationChannel === 'whatsapp') {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è WhatsApp
        const message = `üé´ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –°–õ–£–ñ–ë–£ –ü–û–î–î–ï–†–ñ–ö–ò*\n\n` +
          `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${formData.name}\n` +
          `üìß *Email:* ${formData.email}\n` +
          `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
          `üìã *–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:* ${formData.subject}\n` +
          `üè∑Ô∏è *–¢–∏–ø –∑–∞—è–≤–∫–∏:* ${ticketTypes.find(t => t.id === formData.type)?.name || formData.type}\n` +
          `üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${categories.find(c => c.id === formData.category)?.name || formData.category}\n` +
          `‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${formData.priority === 'low' ? '–ù–∏–∑–∫–∏–π' : formData.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : formData.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' : '–°—Ä–æ—á–Ω—ã–π'}\n\n` +
          `üìù *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n${formData.message}\n\n` +
          `#–ø–æ–¥–¥–µ—Ä–∂–∫–∞ #helpdesk #—Å–æ—Ç—Ä—É–¥–Ω–∏–∫`;
        
        // –°–æ–∑–¥–∞–µ–º WhatsApp URL
        const whatsappNumber = '77770131838'; // –ù–æ–º–µ—Ä –±–µ–∑ + –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        const encodedMessage = encodeURIComponent(message);
        const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'whatsapp_pending'
        const ticketData = {
          subject: formData.subject,
          description: formData.message,
          type: formData.type,
          category: formData.category,
          priority: formData.priority,
          status: 'whatsapp_pending',
          user_id: isAuthenticated && user ? user.id : null,
          metadata: {
            contactPreference: 'email',
            communicationChannel: 'whatsapp',
            whatsappSent: false
          },
          requester_metadata: {
            name: formData.name,
            email: formData.email,
            phone: formData.phone,
            full_name: formData.name
          }
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        const response = await ticketService.createTicket(ticketData, !isAuthenticated);
        const newTicket = response.ticket || response;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        window.open(whatsappUrl, '_blank');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        setError(null);
        setSuccessType('whatsapp');
        setCreatedTicketId(newTicket.id);
        setShowSuccessNotification(true);
        
      } else {
        // –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Email
        const ticketData = {
          subject: formData.subject,
          description: formData.message,
          type: formData.type,
          category: formData.category,
          priority: formData.priority,
          user_id: isAuthenticated && user ? user.id : null,
          metadata: {
            type: formData.type,
            contactPreference: 'email',
            communicationChannel: 'email'
          },
          requester_metadata: {
            name: formData.name,
            email: formData.email,
            phone: formData.phone,
            full_name: formData.name
          }
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        const response = await ticketService.createTicket(ticketData, !isAuthenticated);
        const newTicket = response.ticket || response;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        setError(null);
        setSuccessType('email');
        setCreatedTicketId(newTicket.id);
        setShowSuccessNotification(true);
      }
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (!isAuthenticated) {
        setFormData({
          name: '',
          email: '',
          phone: '',
          subject: '',
          category: '',
          type: 'support_request',
          message: '',
          priority: 'medium',
          communicationChannel: 'email',
        });
      } else {
        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        setFormData(prev => ({
          ...prev,
          subject: '',
          category: '',
          type: 'support_request',
          message: '',
          priority: 'medium',
          communicationChannel: 'email',
        }));
      }
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', err);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (err.response && (err.response.status === 401 || err.response.status === 403)) {
        setError(t('form.authError', '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.'));
      } else if (!err.response) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        setError(t('form.networkError', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'));
      } else {
        setError(err.response?.data?.error || err.response?.data?.message || t('form.submitError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
      }
    } finally {
      setLoading(false);
    }
  };
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (isStaff && !isAuthenticated) {
    return (
      <Paper sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="h6" gutterBottom>
          {t('form.staffAuthRequired', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')}
        </Typography>
        
        <Typography paragraph>
          {t('form.staffAuthMessage', '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.')}
        </Typography>
        
        <Button
          variant="contained"
          color="primary"
          startIcon={<LoginIcon />}
          onClick={handleLogin}
          sx={{ mt: 2 }}
        >
          {t('form.login', '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')}
        </Button>
      </Paper>
    );
  }
  
  return (
    <>
      <SuccessNotification
        open={showSuccessNotification}
        onClose={() => setShowSuccessNotification(false)}
        type={successType}
        ticketId={createdTicketId}
        autoRedirect={true}
        redirectDelay={3000}
      />
      
      <Box component="form" onSubmit={handleSubmit} noValidate>
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          <AlertTitle>{t('form.error', '–û—à–∏–±–∫–∞')}</AlertTitle>
          {error}
          {error.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') && (
            <Box sx={{ mt: 2 }}>
              <Button
                variant="outlined"
                color="primary"
                size="small"
                startIcon={<LoginIcon />}
                onClick={handleLogin}
              >
                {t('form.login', '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')}
              </Button>
            </Box>
          )}
        </Alert>
      )}
      
      <Typography variant="h6" gutterBottom>
        {t('form.contactInfo', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}
      </Typography>
      
      <Grid container spacing={3} mb={3}>
        <Grid item xs={12} sm={6}>
          <TextField
            required
            fullWidth
            id="name"
            name="name"
            label={t('form.name', '–ò–º—è')}
            value={formData.name}
            onChange={handleChange}
            error={!!formErrors.name}
            helperText={formErrors.name}
            disabled={loading || (isAuthenticated && user)}
            inputProps={{
              style: {
                fontSize: '1rem',
                padding: '14px 12px'
              }
            }}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            required
            fullWidth
            id="email"
            name="email"
            label={t('form.email', 'Email')}
            type="email"
            value={formData.email}
            onChange={handleChange}
            error={!!formErrors.email}
            helperText={formErrors.email}
            disabled={loading || (isAuthenticated && user)}
            inputProps={{
              style: {
                fontSize: '1rem',
                padding: '14px 12px'
              }
            }}
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            fullWidth
            id="phone"
            name="phone"
            label={t('form.phone', '–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)')}
            value={formData.phone}
            onChange={handleChange}
            error={!!formErrors.phone}
            helperText={formErrors.phone}
            disabled={loading}
            inputProps={{
              style: {
                fontSize: '1rem',
                padding: '14px 12px'
              }
            }}
          />
        </Grid>
      </Grid>
      
      <Divider sx={{ my: 3 }} />
      
      <Typography variant="h6" gutterBottom>
        {t('form.ticketDetails', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ')}
      </Typography>
      
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <TextField
            required
            fullWidth
            id="subject"
            name="subject"
            label={t('form.subject', '–¢–µ–º–∞')}
            value={formData.subject}
            onChange={handleChange}
            error={!!formErrors.subject}
            helperText={formErrors.subject}
            disabled={loading}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <FormControl fullWidth error={!!formErrors.type} disabled={loading}>
            <InputLabel id="type-label">{t('tickets:create.ticketType', '–¢–∏–ø –∑–∞—è–≤–∫–∏')}</InputLabel>
            <Select
              labelId="type-label"
              id="type"
              name="type"
              value={formData.type}
              onChange={handleChange}
              label={t('tickets:create.ticketType', '–¢–∏–ø –∑–∞—è–≤–∫–∏')}
              MenuProps={{ PaperProps: { style: { maxHeight: 300 } } }}
            >
              {ticketTypes.map((type) => (
                <MenuItem key={type.id} value={type.id}>{type.name}</MenuItem>
              ))}
            </Select>
            {formErrors.type && <FormHelperText>{formErrors.type}</FormHelperText>}
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6} md={4}>
          <FormControl fullWidth error={!!formErrors.category} disabled={loading}>
            <InputLabel id="category-label">{t('form.category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}</InputLabel>
            <Select
              labelId="category-label"
              id="category"
              name="category"
              value={formData.category}
              onChange={handleChange}
              label={t('form.category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}
              MenuProps={{ PaperProps: { style: { maxHeight: 300 } } }}
            >
              {categories.map((category) => (
                <MenuItem key={category.id} value={category.id}>{category.name}</MenuItem>
              ))}
            </Select>
            {formErrors.category && <FormHelperText>{formErrors.category}</FormHelperText>}
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={12} md={4}>
          <FormControl fullWidth disabled={loading}>
            <InputLabel id="priority-label">{t('form.priority', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')}</InputLabel>
            <Select
              labelId="priority-label"
              id="priority"
              name="priority"
              value={formData.priority}
              onChange={handleChange}
              label={t('form.priority', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')}
              MenuProps={{ PaperProps: { style: { maxHeight: 300 } } }}
            >
              <MenuItem value="low">{t('tickets:priority.low', '–ù–∏–∑–∫–∏–π')}</MenuItem>
              <MenuItem value="medium">{t('tickets:priority.medium', '–°—Ä–µ–¥–Ω–∏–π')}</MenuItem>
              <MenuItem value="high">{t('tickets:priority.high', '–í—ã—Å–æ–∫–∏–π')}</MenuItem>
              <MenuItem value="urgent">{t('tickets:priority.urgent', '–°—Ä–æ—á–Ω—ã–π')}</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12}>
          <TextField
            required
            fullWidth
            multiline
            rows={4}
            id="message"
            name="message"
            label={t('form.message', '–°–æ–æ–±—â–µ–Ω–∏–µ')}
            value={formData.message}
            onChange={handleChange}
            error={!!formErrors.message}
            helperText={formErrors.message}
            disabled={loading}
          />
        </Grid>
        <Grid item xs={12}>
          <FormControl component="fieldset" fullWidth>
            <Typography variant="subtitle1" sx={{ mb: 2, fontWeight: 500 }}>
              {t('tickets:create.communicationChannel', '–°–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏')}
            </Typography>
            <Box sx={{ display: 'flex', gap: 3, flexWrap: 'wrap' }}>
              <Button
                variant={formData.communicationChannel === 'email' ? 'contained' : 'outlined'}
                onClick={() => setFormData(prev => ({ ...prev, communicationChannel: 'email' }))}
                startIcon={<EmailIcon />}
                sx={{ 
                  flex: 1, 
                  minWidth: '200px',
                  py: 1.5,
                  ...(formData.communicationChannel === 'email' ? {
                    bgcolor: 'primary.main',
                    '&:hover': { bgcolor: 'primary.dark' }
                  } : {})
                }}
                disabled={loading}
              >
                Email
              </Button>
              <Button
                variant={formData.communicationChannel === 'whatsapp' ? 'contained' : 'outlined'}
                onClick={() => setFormData(prev => ({ ...prev, communicationChannel: 'whatsapp' }))}
                startIcon={<WhatsAppIcon />}
                sx={{ 
                  flex: 1, 
                  minWidth: '200px',
                  py: 1.5,
                  ...(formData.communicationChannel === 'whatsapp' ? {
                    bgcolor: '#25D366',
                    color: 'white',
                    '&:hover': { bgcolor: '#1DA851' }
                  } : {
                    borderColor: '#25D366',
                    color: '#25D366',
                    '&:hover': { 
                      borderColor: '#1DA851',
                      bgcolor: 'rgba(37, 211, 102, 0.04)'
                    }
                  })
                }}
                disabled={loading}
              >
                WhatsApp
              </Button>
            </Box>
            <Typography variant="caption" sx={{ mt: 1, color: 'text.secondary' }}>
              {formData.communicationChannel === 'whatsapp' 
                ? t('tickets:create.whatsappHint', '–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ WhatsApp –Ω–∞ –Ω–æ–º–µ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ +7 777 013 1838. –î–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –≤–µ–¥–µ—Ç—Å—è –ø–æ email.')
                : t('tickets:create.emailHint', '–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email')
              }
            </Typography>
          </FormControl>
        </Grid>
        <Grid item xs={12}>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: { xs: 'center', sm: 'flex-start' },
            mt: 2 
          }}>
            <Button
              type="submit"
              variant="contained"
              color="primary"
              size="large"
              disabled={loading}
              startIcon={loading ? <CircularProgress size={24} color="inherit" /> : <SendIcon />}
              sx={{ 
                py: { xs: 1.5, sm: 1 },
                px: { xs: 3, sm: 2 },
                fontSize: { xs: '1rem', sm: 'inherit' },
                width: { xs: '100%', sm: 'auto' },
                maxWidth: '400px'
              }}
            >
              {loading 
                ? t('form.sending', '–û—Ç–ø—Ä–∞–≤–∫–∞...') 
                : t('form.submit', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')}
            </Button>
          </Box>
        </Grid>
      </Grid>
    </Box>
    </>
  );
};

export default TicketForm; 